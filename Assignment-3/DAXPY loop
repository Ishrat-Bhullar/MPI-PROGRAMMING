#include <iostream>
#include <vector>
#include <mpi.h>

void daxpy(int n, double a, std::vector<double>& X, std::vector<double>& Y) {
    for (int i = 0; i < n; ++i) {
        X[i] = a * X[i] + Y[i];
    }
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int N = 1 << 16;
    double a = 2.0;
    std::vector<double> X(N), Y(N);

    if (rank == 0) {
        for (int i = 0; i < N; ++i) {
            X[i] = i;
            Y[i] = 2 * i;
        }
    }

    double start_time = MPI_Wtime();

    int local_n = N / size;
    std::vector<double> local_X(local_n), local_Y(local_n);

    MPI_Scatter(X.data(), local_n, MPI_DOUBLE, local_X.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);
    MPI_Scatter(Y.data(), local_n, MPI_DOUBLE, local_Y.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    daxpy(local_n, a, local_X, local_Y);

    MPI_Gather(local_X.data(), local_n, MPI_DOUBLE, X.data(), local_n, MPI_DOUBLE, 0, MPI_COMM_WORLD);

    double end_time = MPI_Wtime();

    if (rank == 0) {
        std::cout << "MPI DAXPY completed in " << end_time - start_time << " seconds.\n";
    }

    MPI_Finalize();
    return 0;
}
