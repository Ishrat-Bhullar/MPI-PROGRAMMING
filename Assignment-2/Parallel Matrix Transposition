#include <iostream>
#include <vector>
#include <mpi.h>

void transpose_block(int* local_matrix, int* local_transposed, int block_size, int N) {
    for (int i = 0; i < block_size; ++i) {
        for (int j = 0; j < block_size; ++j) {
            local_transposed[j * block_size + i] = local_matrix[i * block_size + j];
        }
    }
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int M = 4;
    const int N = 4;

    int block_size = M / size;

    int* matrix = nullptr;
    int* transposed_matrix = nullptr;
    
    if (rank == 0) {
        matrix = new int[M * N];
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                matrix[i * N + j] = i * N + j + 1;
            }
        }

        transposed_matrix = new int[M * N];
    }

    int* local_matrix = new int[block_size * N];
    int* local_transposed = new int[block_size * N];

    MPI_Scatter(matrix, block_size * N, MPI_INT, local_matrix, block_size * N, MPI_INT, 0, MPI_COMM_WORLD);

    transpose_block(local_matrix, local_transposed, block_size, N);

    MPI_Gather(local_transposed, block_size * N, MPI_INT, transposed_matrix, block_size * N, MPI_INT, 0, MPI_COMM_WORLD);

    if (rank == 0) {
        std::cout << "Original Matrix:" << std::endl;
        for (int i = 0; i < M; ++i) {
            for (int j = 0; j < N; ++j) {
                std::cout << matrix[i * N + j] << " ";
            }
            std::cout << std::endl;
        }

        std::cout << "Transposed Matrix:" << std::endl;
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < M; ++j) {
                std::cout << transposed_matrix[i * M + j] << " ";
            }
            std::cout << std::endl;
        }

        delete[] matrix;
        delete[] transposed_matrix;
    }

    delete[] local_matrix;
    delete[] local_transposed;

    MPI_Finalize();
    return 0;
}
