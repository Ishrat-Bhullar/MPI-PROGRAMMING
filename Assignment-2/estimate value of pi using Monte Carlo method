#include <iostream>
#include <cstdlib>
#include <cmath>
#include <mpi.h>

int monte_carlo_pi(int num_points) {
    int inside_circle = 0;
    for (int i = 0; i < num_points; ++i) {
        double x = static_cast<double>(rand()) / RAND_MAX;  
        double y = static_cast<double>(rand()) / RAND_MAX;  
        if (x * x + y * y <= 1) {  
            inside_circle++;
        }
    }
    return inside_circle;
}

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv);  
    int rank, size;

    MPI_Comm_rank(MPI_COMM_WORLD, &rank);  
    MPI_Comm_size(MPI_COMM_WORLD, &size);  

    int total_points = 1000000;  
    int points_per_process = total_points / size;  

    
    srand(rank + 1);  

    int inside_circle = monte_carlo_pi(points_per_process);

    
    int total_inside_circle;
    MPI_Reduce(&inside_circle, &total_inside_circle, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

   
    if (rank == 0) {
        double pi_estimate = 4.0 * total_inside_circle / total_points;  
        std::cout << "Estimated value of Pi: " << pi_estimate << std::endl;
    }

    MPI_Finalize(); 
    return 0;
}
