#include <iostream>
#include <vector>
#include <cstdlib>
#include <ctime>
#include <mpi.h>

void local_prefix_sum(std::vector<int>& local_data, int local_n) {
    for (int i = 1; i < local_n; ++i) {
        local_data[i] += local_data[i - 1];
    }
}

void parallel_prefix_sum(std::vector<int>& data, int N, int rank, int size) {
    int local_n = N / size;
    std::vector<int> local_data(local_n);
    
    MPI_Scatter(data.data(), local_n, MPI_INT, local_data.data(), local_n, MPI_INT, 0, MPI_COMM_WORLD);

    local_prefix_sum(local_data, local_n);

    int offset = local_n;
    for (int step = 1; step < size; step <<= 1) {
        if (rank >= step) {
            MPI_Sendrecv(&local_data[0], 1, MPI_INT, rank - step, 0,
                         &local_data[0], 1, MPI_INT, rank - step, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
        }

        if (rank >= step) {
            for (int i = 0; i < local_n; ++i) {
                local_data[i] += local_data[0];
            }
        }
    }

    MPI_Bcast(&local_data[0], 1, MPI_INT, 0, MPI_COMM_WORLD);
    
    MPI_Gather(local_data, local_n, MPI_INT, data, local_n, MPI_INT, 0, MPI_COMM_WORLD);
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int N = 16;
    std::vector<int> data(N);

    if (rank == 0) {
        for (int i = 0; i < N; i++) {
            data[i] = i + 1;
        }
    }

    parallel_prefix_sum(data, N, rank, size);

    if (rank == 0) {
        std::cout << "Final prefix sum: ";
        for (int i = 0; i < N; ++i) {
            std::cout << data[i] << " ";
        }
        std::cout << std::endl;
    }

    MPI_Finalize();
    return 0;
}
