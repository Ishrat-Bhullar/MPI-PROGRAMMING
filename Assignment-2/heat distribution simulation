#include <iostream>
#include <cstdlib>
#include <ctime>
#include <cmath>
#include <mpi.h>

#define MAX_ITER 1000  
#define THRESHOLD 0.01  

void initialize_grid(double* grid, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
           
            grid[i * cols + j] = 20 + rand() % 80;
        }
    }
}

void print_grid(double* grid, int rows, int cols) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            std::cout << grid[i * cols + j] << " ";
        }
        std::cout << std::endl;
    }
}

void update_grid(double* grid, double* new_grid, int rows, int cols) {
    for (int i = 1; i < rows - 1; i++) {
        for (int j = 1; j < cols - 1; j++) {
            new_grid[i * cols + j] = 0.25 * (grid[(i - 1) * cols + j] +  
                                             grid[(i + 1) * cols + j] +  
                                             grid[i * cols + (j - 1)] +  
                                             grid[i * cols + (j + 1)]); 
        }
    }
}


void heat_distribution(MPI_Comm comm, int rank, int size, int rows, int cols) {
    int local_rows = rows / size;
    double* grid = new double[local_rows * cols];
    double* new_grid = new double[local_rows * cols];

    initialize_grid(grid, local_rows, cols);

    
    for (int iter = 0; iter < MAX_ITER; iter++) {
        
        if (rank > 0) {
            MPI_Send(&grid[0 * cols], cols, MPI_DOUBLE, rank - 1, 0, comm);
            MPI_Recv(&grid[(local_rows - 1) * cols], cols, MPI_DOUBLE, rank - 1, 0, comm, MPI_STATUS_IGNORE);
        }
        if (rank < size - 1) {
            MPI_Send(&grid[(local_rows - 1) * cols], cols, MPI_DOUBLE, rank + 1, 0, comm);
            MPI_Recv(&grid[0], cols, MPI_DOUBLE, rank + 1, 0, comm, MPI_STATUS_IGNORE);
        }

        update_grid(grid, new_grid, local_rows, cols);

        
        std::swap(grid, new_grid);

       
        MPI_Barrier(comm);
    }

    
    if (rank == 0) {
        print_grid(grid, rows, cols);
    }

    delete[] grid;
    delete[] new_grid;
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    const int rows = 10;  
    const int cols = 10;  

    heat_distribution(MPI_COMM_WORLD, rank, size, rows, cols);

    MPI_Finalize();
    return 0;
}
